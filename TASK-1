import re
import math

def calculate_entropy(password):
    # Calculate the entropy based on the character set used
    charset_size = 0
    if re.search(r'[a-z]', password):
        charset_size += 26  # lowercase letters
    if re.search(r'[A-Z]', password):
        charset_size += 26  # uppercase letters
    if re.search(r'[0-9]', password):
        charset_size += 10  # digits
    if re.search(r'[!@#$%^&*()_+\-=\[\]{};:"\\|,.<>\/?]', password):
        charset_size += 32  # special characters

    # Entropy formula: length of password * log2(charset_size)
    return len(password) * math.log2(charset_size) if charset_size > 0 else 0

def assess_password_strength(password):
    score = 0
    feedback = []

    # Length Check
    if len(password) >= 12:
        score += 2
        feedback.append("Good length.")
    elif len(password) >= 8:
        score += 1
        feedback.append("Acceptable length, but consider a longer password.")
    else:
        feedback.append("Password is too short.")

    # Complexity Check
    has_lower = re.search(r'[a-z]', password)
    has_upper = re.search(r'[A-Z]', password)
    has_digit = re.search(r'[0-9]', password)
    has_special = re.search(r'[!@#$%^&*()_+\-=\[\]{};:"\\|,.<>\/?]', password)
    
    if has_lower and has_upper and has_digit and has_special:
        score += 2
        feedback.append("Good complexity.")
    elif (has_lower or has_upper) and has_digit and has_special:
        score += 1
        feedback.append("Acceptable complexity.")
    else:
        feedback.append("Weak complexity. Use a mix of upper and lower letters, digits, and special characters.")

    # Uniqueness Check (repeated/sequential patterns)
    if re.search(r'(.)\1{2,}', password):
        feedback.append("Avoid using repeated characters.")
    if re.search(r'123|abc|qwerty|password', password.lower()):
        feedback.append("Avoid common patterns and sequences like '123', 'abc', or 'password'.")

    # Calculate entropy
    entropy = calculate_entropy(password)
    if entropy > 60:
        score += 2
        feedback.append(f"Strong entropy ({int(entropy)} bits).")
    elif entropy > 40:
        score += 1
        feedback.append(f"Moderate entropy ({int(entropy)} bits).")
    else:
        feedback.append(f"Low entropy ({int(entropy)} bits). Increase password complexity.")

    # Scoring and Final Feedback
    if score >= 6:
        strength = "Strong"
    elif score >= 3:
        strength = "Moderate"
    else:
        strength = "Weak"

    return {
        'strength': strength,
        'feedback': feedback,
        'score': score,
        'entropy': entropy
    }

# Example usage
password = "P@ssw0rd123!"
result = assess_password_strength(password)

print(f"Password Strength: {result['strength']}")
print("Feedback:")
for item in result['feedback']:
    print(f"- {item}")
